// <auto-generated />
using System;
using CricketService.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CricketService.Data.Migrations
{
    [DbContext(typeof(CricketServiceContext))]
    [Migration("20230311062813_AddingInitialMigration")]
    partial class AddingInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CricketService.Data.Entities.CricketPlayerInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("BattingStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("batting_style");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("birth_place");

                    b.Property<string>("BowlingStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bowling_style");

                    b.Property<string[]>("Content")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("contents");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Formats")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("formats");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("height");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("href");

                    b.Property<string>("ImageSrc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_src");

                    b.Property<string>("InternationalTeamNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("international_team_names");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PlayingRole")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("playing_role");

                    b.Property<string>("TeamNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_names");

                    b.HasKey("Uuid");

                    b.ToTable("cricket_players_info");
                });

            modelBuilder.Entity("CricketService.Data.Entities.CricketTeamInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("FlagUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("flag_url");

                    b.Property<string>("Formats")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("formats");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("team_name");

                    b.HasKey("Uuid");

                    b.ToTable("cricket_teams_info");
                });

            modelBuilder.Entity("CricketService.Data.Entities.ODICricketMatchInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string[]>("FormatDebut")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("format_debut");

                    b.Property<string[]>("InternationalDebut")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("international_debut");

                    b.Property<string>("MatchDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_date");

                    b.Property<string>("MatchDays")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_days");

                    b.Property<string>("MatchNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_no");

                    b.Property<string>("MatchReferee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_referee");

                    b.Property<string>("MatchTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_title");

                    b.Property<string>("PlayerOfTheMatch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_of_the_match");

                    b.Property<string>("ReserveUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reserve_umpire");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("season");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("series");

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_details");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_details");

                    b.Property<string>("TossDecision")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_decision");

                    b.Property<string>("TossWinner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_winner");

                    b.Property<string>("TvUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tv_umpire");

                    b.Property<string[]>("Umpires")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("umpires");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("venue");

                    b.HasKey("Uuid");

                    b.ToTable("one_day_international_matches");
                });

            modelBuilder.Entity("CricketService.Data.Entities.T20ICricketMatchInfo", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string[]>("FormatDebut")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("format_debut");

                    b.Property<string[]>("InternationalDebut")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("international_debut");

                    b.Property<string>("MatchDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_date");

                    b.Property<string>("MatchDays")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_days");

                    b.Property<string>("MatchNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_no");

                    b.Property<string>("MatchReferee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_referee");

                    b.Property<string>("MatchTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_title");

                    b.Property<string>("PlayerOfTheMatch")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_of_the_match");

                    b.Property<string>("ReserveUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reserve_umpire");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("season");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("series");

                    b.Property<string>("Team1")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team1_details");

                    b.Property<string>("Team2")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("team2_details");

                    b.Property<string>("TossDecision")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_decision");

                    b.Property<string>("TossWinner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("toss_winner");

                    b.Property<string>("TvUmpire")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tv_umpire");

                    b.Property<string[]>("Umpires")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("umpires");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("venue");

                    b.HasKey("Uuid");

                    b.ToTable("t20_international_matches");
                });
#pragma warning restore 612, 618
        }
    }
}
